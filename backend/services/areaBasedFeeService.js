const Fee = require('../models/feeModel');
const Payment = require('../models/paymentModel');
const Household = require('../models/householdModel');

// Mapping c√°c lo·∫°i ph√≠ t√≠nh theo di·ªán t√≠ch
const AREA_BASED_FEE_CODES = {
  'PHI006': { // Ph√≠ d·ªãch v·ª• chung c∆∞
    name: 'Ph√≠ d·ªãch v·ª• chung c∆∞',
    unitPrice: 5000, // 5,000 VND/m¬≤/th√°ng
    description: 'Ph√≠ d·ªãch v·ª• chung c∆∞'
  },
  'PHI007': { // Ph√≠ qu·∫£n l√Ω chung c∆∞  
    name: 'Ph√≠ qu·∫£n l√Ω chung c∆∞',
    unitPrice: 7000, // 7,000 VND/m¬≤/th√°ng
    description: 'Ph√≠ qu·∫£n l√Ω chung c∆∞'
  }
};

/**
 * T√≠nh ph√≠ theo di·ªán t√≠ch cho m·ªôt h·ªô gia ƒë√¨nh
 * @param {string} householdId - ID h·ªô gia ƒë√¨nh
 * @returns {Object} - Chi ti·∫øt ph√≠ theo di·ªán t√≠ch
 */
const calculateAreaBasedFeeForHousehold = async (householdId) => {
  try {
    // L·∫•y th√¥ng tin h·ªô gia ƒë√¨nh
    const household = await Household.findById(householdId);
    if (!household || !household.active) {
      return {
        householdId,
        apartmentNumber: household ? household.apartmentNumber : 'Unknown',
        area: 0,
        feeDetails: [],
        totalAmount: 0
      };
    }

    const area = household.area || 0;
    if (area <= 0) {
      return {
        householdId,
        apartmentNumber: household.apartmentNumber,
        area: 0,
        feeDetails: [],
        totalAmount: 0
      };
    }

    // L·∫•y c√°c lo·∫°i ph√≠ theo di·ªán t√≠ch ƒëang ho·∫°t ƒë·ªông
    const areaBasedFees = await Fee.find({
      feeCode: { $in: Object.keys(AREA_BASED_FEE_CODES) },
      active: true
    });

    const feeDetails = [];
    let totalAmount = 0;

    for (const fee of areaBasedFees) {
      const feeInfo = AREA_BASED_FEE_CODES[fee.feeCode];
      const amount = area * feeInfo.unitPrice;
      totalAmount += amount;

      feeDetails.push({
        feeCode: fee.feeCode,
        feeName: fee.name,
        unitPrice: feeInfo.unitPrice,
        area: area,
        amount: amount,
        feeId: fee._id
      });
    }

    return {
      householdId,
      apartmentNumber: household.apartmentNumber,
      area: area,
      feeDetails,
      totalAmount
    };
  } catch (error) {
    console.error('Error calculating area-based fee for household:', error);
    throw error;
  }
};

/**
 * T√≠nh ph√≠ theo di·ªán t√≠ch cho t·∫•t c·∫£ h·ªô gia ƒë√¨nh
 * @returns {Array} - Danh s√°ch ph√≠ theo di·ªán t√≠ch cho t·∫•t c·∫£ h·ªô
 */
const calculateAreaBasedFeesForAllHouseholds = async () => {
  try {
    // L·∫•y t·∫•t c·∫£ h·ªô gia ƒë√¨nh ƒëang ho·∫°t ƒë·ªông
    const households = await Household.find({ active: true });
    
    const feeCalculations = [];
    
    for (const household of households) {
      const calculation = await calculateAreaBasedFeeForHousehold(household._id);
      feeCalculations.push(calculation);
    }
    
    return feeCalculations;
  } catch (error) {
    console.error('Error calculating area-based fees for all households:', error);
    throw error;
  }
};

/**
 * T·∫°o thanh to√°n ph√≠ theo di·ªán t√≠ch cho m·ªôt th√°ng c·ª• th·ªÉ
 * @param {Date} period - Th√°ng t·∫°o ph√≠ (ng√†y 1 c·ªßa th√°ng)
 * @param {boolean} overwriteExisting - C√≥ ghi ƒë√® thanh to√°n ƒë√£ t·ªìn t·∫°i kh√¥ng
 * @returns {Object} - K·∫øt qu·∫£ t·∫°o thanh to√°n
 */
const createAreaBasedPaymentsForMonth = async (period, overwriteExisting = false) => {
  try {
    // ƒê·∫£m b·∫£o period l√† ng√†y 1 c·ªßa th√°ng
    const normalizedPeriod = new Date(period.getFullYear(), period.getMonth(), 1);
    
    console.log(`üè¢ T·∫°o ph√≠ theo di·ªán t√≠ch cho th√°ng ${normalizedPeriod.getMonth() + 1}/${normalizedPeriod.getFullYear()}`);

    // L·∫•y t·∫•t c·∫£ lo·∫°i ph√≠ theo di·ªán t√≠ch
    const areaBasedFees = await Fee.find({
      feeCode: { $in: Object.keys(AREA_BASED_FEE_CODES) },
      active: true
    });

    if (areaBasedFees.length === 0) {
      throw new Error('Kh√¥ng t√¨m th·∫•y lo·∫°i ph√≠ theo di·ªán t√≠ch trong h·ªá th·ªëng');
    }

    // T√≠nh ph√≠ theo di·ªán t√≠ch cho t·∫•t c·∫£ h·ªô gia ƒë√¨nh
    const householdAreaFees = await calculateAreaBasedFeesForAllHouseholds();
    
    const createdPayments = [];
    const skippedPayments = [];
    const errors = [];

    for (const householdFee of householdAreaFees) {
      if (householdFee.totalAmount <= 0) {
        continue; // B·ªè qua n·∫øu kh√¥ng c√≥ ph√≠ ho·∫∑c kh√¥ng c√≥ di·ªán t√≠ch
      }

      for (const feeDetail of householdFee.feeDetails) {
        try {
          // Ki·ªÉm tra xem ƒë√£ c√≥ thanh to√°n cho th√°ng n√†y ch∆∞a
          const existingPayment = await Payment.findOne({
            household: householdFee.householdId,
            fee: feeDetail.feeId,
            period: normalizedPeriod
          });

          if (existingPayment && !overwriteExisting) {
            skippedPayments.push({
              householdId: householdFee.householdId,
              apartmentNumber: householdFee.apartmentNumber,
              feeCode: feeDetail.feeCode,
              amount: feeDetail.amount,
              reason: 'ƒê√£ c√≥ thanh to√°n cho th√°ng n√†y'
            });
            continue;
          }

          // T·∫°o ho·∫∑c c·∫≠p nh·∫≠t thanh to√°n
          let payment;
          if (existingPayment && overwriteExisting) {
            payment = await Payment.findByIdAndUpdate(
              existingPayment._id,
              {
                amount: feeDetail.amount,
                status: 'pending',
                description: `${feeDetail.feeName} th√°ng ${normalizedPeriod.getMonth() + 1}/${normalizedPeriod.getFullYear()} - ${householdFee.area}m¬≤ √ó ${feeDetail.unitPrice.toLocaleString()} VND/m¬≤`,
                period: normalizedPeriod
              },
              { new: true }
            );
          } else {
            payment = new Payment({
              household: householdFee.householdId,
              fee: feeDetail.feeId,
              amount: feeDetail.amount,
              status: 'pending',
              description: `${feeDetail.feeName} th√°ng ${normalizedPeriod.getMonth() + 1}/${normalizedPeriod.getFullYear()} - ${householdFee.area}m¬≤ √ó ${feeDetail.unitPrice.toLocaleString()} VND/m¬≤`,
              period: normalizedPeriod
            });
            await payment.save();
          }

          createdPayments.push({
            paymentId: payment._id,
            householdId: householdFee.householdId,
            apartmentNumber: householdFee.apartmentNumber,
            feeCode: feeDetail.feeCode,
            feeName: feeDetail.feeName,
            area: householdFee.area,
            unitPrice: feeDetail.unitPrice,
            amount: feeDetail.amount
          });

        } catch (error) {
          console.error(`L·ªói t·∫°o thanh to√°n ph√≠ ${feeDetail.feeCode} cho h·ªô ${householdFee.apartmentNumber}:`, error);
          errors.push({
            householdId: householdFee.householdId,
            apartmentNumber: householdFee.apartmentNumber,
            feeCode: feeDetail.feeCode,
            error: error.message
          });
        }
      }
    }

    const summary = {
      period: normalizedPeriod,
      totalHouseholds: householdAreaFees.length,
      created: createdPayments.length,
      skipped: skippedPayments.length,
      errors: errors.length,
      totalAmount: createdPayments.reduce((sum, p) => sum + p.amount, 0)
    };

    console.log(`‚úÖ T·∫°o ph√≠ theo di·ªán t√≠ch ho√†n t·∫•t:
      - ƒê√£ t·∫°o: ${summary.created} thanh to√°n
      - ƒê√£ b·ªè qua: ${summary.skipped} thanh to√°n  
      - L·ªói: ${summary.errors} thanh to√°n
      - T·ªïng ti·ªÅn: ${summary.totalAmount.toLocaleString()} VND`);

    return {
      ...summary,
      createdPayments,
      skippedPayments,
      errors
    };

  } catch (error) {
    console.error('Error creating area-based payments for month:', error);
    throw error;
  }
};

/**
 * L·∫•y th·ªëng k√™ ph√≠ theo di·ªán t√≠ch
 * @returns {Object} - Th·ªëng k√™ ph√≠ theo di·ªán t√≠ch
 */
const getAreaBasedFeeStatistics = async () => {
  try {
    // L·∫•y th·ªëng k√™ t·ªïng quan
    const totalHouseholds = await Household.countDocuments({ active: true });
    const householdStats = await Household.aggregate([
      { $match: { active: true } },
      { 
        $group: { 
          _id: null,
          totalArea: { $sum: '$area' },
          avgArea: { $avg: '$area' },
          minArea: { $min: '$area' },
          maxArea: { $max: '$area' }
        }
      }
    ]);

    const stats = householdStats[0] || { totalArea: 0, avgArea: 0, minArea: 0, maxArea: 0 };

    // T√≠nh t·ªïng ph√≠ theo di·ªán t√≠ch h√†ng th√°ng cho t·ª´ng lo·∫°i ph√≠
    const feeCalculations = await calculateAreaBasedFeesForAllHouseholds();
    const totalMonthlyFees = feeCalculations.reduce((sum, calc) => sum + calc.totalAmount, 0);

    // Th·ªëng k√™ theo t·ª´ng lo·∫°i ph√≠
    const feeBreakdown = {};
    for (const [feeCode, feeInfo] of Object.entries(AREA_BASED_FEE_CODES)) {
      const totalAmount = stats.totalArea * feeInfo.unitPrice;
      feeBreakdown[feeCode] = {
        name: feeInfo.name,
        unitPrice: feeInfo.unitPrice,
        totalArea: stats.totalArea,
        totalAmount: totalAmount
      };
    }

    // Th·ªëng k√™ thanh to√°n th√°ng g·∫ßn nh·∫•t c√≥ d·ªØ li·ªáu
    const areaBasedFees = await Fee.find({
      feeCode: { $in: Object.keys(AREA_BASED_FEE_CODES) },
      active: true
    });

    // T√¨m th√°ng g·∫ßn nh·∫•t c√≥ thanh to√°n
    const latestPayment = await Payment.findOne({
      fee: { $in: areaBasedFees.map(f => f._id) }
    }).sort({ period: -1 });

    let recentMonthPayments = [];
    if (latestPayment) {
      recentMonthPayments = await Payment.find({
        fee: { $in: areaBasedFees.map(f => f._id) },
        period: latestPayment.period
      }).populate('fee');
    }

    const paidPayments = recentMonthPayments.filter(p => p.status === 'paid');
    const pendingPayments = recentMonthPayments.filter(p => p.status === 'pending');
    const overduePayments = recentMonthPayments.filter(p => p.status === 'overdue');

    const totalRevenue = paidPayments.reduce((sum, p) => sum + p.amount, 0);
    const pendingRevenue = pendingPayments.reduce((sum, p) => sum + p.amount, 0);
    const overdueRevenue = overduePayments.reduce((sum, p) => sum + p.amount, 0);

    return {
      totalHouseholds,
      totalArea: stats.totalArea,
      avgArea: Math.round(stats.avgArea || 0),
      minArea: stats.minArea || 0,
      maxArea: stats.maxArea || 0,
      totalMonthlyFees,
      feeBreakdown,
      currentMonthStats: {
        period: latestPayment ? latestPayment.period : null,
        totalPayments: recentMonthPayments.length,
        paidPayments: paidPayments.length,
        pendingPayments: pendingPayments.length,
        overduePayments: overduePayments.length,
        totalRevenue,
        pendingRevenue,
        overdueRevenue,
        collectionRate: recentMonthPayments.length > 0 ? 
          Math.round((paidPayments.length / recentMonthPayments.length) * 100) : 0
      }
    };
  } catch (error) {
    console.error('Error getting area-based fee statistics:', error);
    throw error;
  }
};

module.exports = {
  calculateAreaBasedFeeForHousehold,
  calculateAreaBasedFeesForAllHouseholds,
  createAreaBasedPaymentsForMonth,
  getAreaBasedFeeStatistics,
  AREA_BASED_FEE_CODES
}; 