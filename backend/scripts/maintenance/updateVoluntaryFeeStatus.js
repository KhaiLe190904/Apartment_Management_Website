const mongoose = require('mongoose');
const Payment = require('../../models/paymentModel');
const Fee = require('../../models/feeModel');

// Load environment variables
require('dotenv').config();

async function updateVoluntaryFeeStatus() {
  try {
    // Connect to MongoDB
    await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/bluemoon_apartment', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    
    console.log('üîå ƒê√£ k·∫øt n·ªëi ƒë·∫øn MongoDB');

    // T√¨m ph√≠ s·ª≠a ch·ªØa c√¥ng tr√¨nh chung (ph√≠ ƒë√≥ng g√≥p)
    const voluntaryFee = await Fee.findOne({ feeCode: 'PHI004' });
    
    if (!voluntaryFee) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y "Ph√≠ s·ª≠a ch·ªØa c√¥ng tr√¨nh chung" (PHI004)');
      return;
    }

    console.log(`üìã T√¨m th·∫•y ph√≠ ƒë√≥ng g√≥p: ${voluntaryFee.name} (${voluntaryFee.feeCode})`);
    console.log(`üí∞ Gi√°: ${voluntaryFee.amount.toLocaleString()} VND`);
    console.log(`üìù Lo·∫°i: ${voluntaryFee.feeType}`);

    // Th·ªëng k√™ tr·∫°ng th√°i hi·ªán t·∫°i
    const totalPayments = await Payment.countDocuments({ fee: voluntaryFee._id });
    const paidCount = await Payment.countDocuments({ fee: voluntaryFee._id, status: 'paid' });
    const pendingCount = await Payment.countDocuments({ fee: voluntaryFee._id, status: 'pending' });
    const overdueCount = await Payment.countDocuments({ fee: voluntaryFee._id, status: 'overdue' });

    console.log(`\nüìä Tr·∫°ng th√°i hi·ªán t·∫°i:`);
    console.log(`   üìà T·ªïng thanh to√°n: ${totalPayments}`);
    console.log(`   ‚úÖ ƒê√£ thanh to√°n: ${paidCount}`);
    console.log(`   ‚è≥ Ch·ªù thanh to√°n: ${pendingCount}`);
    console.log(`   ‚ùå Qu√° h·∫°n: ${overdueCount}`);

    // C·∫≠p nh·∫≠t t·∫•t c·∫£ thanh to√°n c·ªßa ph√≠ ƒë√≥ng g√≥p th√†nh "paid"
    console.log(`\nüîÑ ƒêang c·∫≠p nh·∫≠t t·∫•t c·∫£ thanh to√°n th√†nh "ƒê√£ thanh to√°n"...`);
    
    const updateResult = await Payment.updateMany(
      { 
        fee: voluntaryFee._id,
        status: { $in: ['pending', 'overdue'] }
      },
      { 
        $set: { 
          status: 'paid',
          paymentDate: new Date() // ƒê·∫∑t ng√†y thanh to√°n l√† h√¥m nay
        }
      }
    );

    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t ${updateResult.modifiedCount} thanh to√°n`);

    // Ki·ªÉm tra k·∫øt qu·∫£
    const updatedStats = {
      total: await Payment.countDocuments({ fee: voluntaryFee._id }),
      paid: await Payment.countDocuments({ fee: voluntaryFee._id, status: 'paid' }),
      pending: await Payment.countDocuments({ fee: voluntaryFee._id, status: 'pending' }),
      overdue: await Payment.countDocuments({ fee: voluntaryFee._id, status: 'overdue' })
    };

    console.log(`\nüìä Tr·∫°ng th√°i sau khi c·∫≠p nh·∫≠t:`);
    console.log(`   üìà T·ªïng thanh to√°n: ${updatedStats.total}`);
    console.log(`   ‚úÖ ƒê√£ thanh to√°n: ${updatedStats.paid} (${(updatedStats.paid/updatedStats.total*100).toFixed(1)}%)`);
    console.log(`   ‚è≥ Ch·ªù thanh to√°n: ${updatedStats.pending}`);
    console.log(`   ‚ùå Qu√° h·∫°n: ${updatedStats.overdue}`);

    // C·∫≠p nh·∫≠t lo·∫°i ph√≠ th√†nh "ƒê√≥ng g√≥p" n·∫øu ch∆∞a ƒë√∫ng
    console.log(`\nüîÑ ƒêang c·∫≠p nh·∫≠t lo·∫°i ph√≠...`);
    
    const updatedFee = await Fee.findByIdAndUpdate(
      voluntaryFee._id,
      { feeType: 'ƒê√≥ng g√≥p' },
      { new: true }
    );

    console.log(`‚úÖ ƒê√£ c·∫≠p nh·∫≠t lo·∫°i ph√≠: ${updatedFee.feeType}`);

    // T√≠nh t·ªïng doanh thu t·ª´ ph√≠ ƒë√≥ng g√≥p
    const totalRevenue = await Payment.aggregate([
      { $match: { fee: voluntaryFee._id, status: 'paid' } },
      { $group: { _id: null, total: { $sum: '$amount' } } }
    ]);

    console.log(`\nüí∞ T·ªïng doanh thu t·ª´ ph√≠ ƒë√≥ng g√≥p: ${(totalRevenue[0]?.total || 0).toLocaleString()} VND`);

    // Hi·ªÉn th·ªã m·ªôt s·ªë thanh to√°n m·∫´u
    console.log(`\nüìã M·ªôt s·ªë thanh to√°n m·∫´u:`);
    const samplePayments = await Payment.find({ fee: voluntaryFee._id })
      .limit(5)
      .sort({ paymentDate: -1 });

    for (const payment of samplePayments) {
      console.log(`   - Thanh to√°n: ${payment.amount.toLocaleString()} VND - ${payment.status} (${payment.paymentDate ? payment.paymentDate.toLocaleDateString('vi-VN') : 'N/A'})`);
    }

  } catch (error) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t ph√≠ ƒë√≥ng g√≥p:', error);
    throw error;
  } finally {
    // Close MongoDB connection
    await mongoose.connection.close();
    console.log('\nüîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
  }
}

// Run the script
updateVoluntaryFeeStatus()
  .then(() => {
    console.log('\n‚úÖ Ho√†n th√†nh vi·ªác c·∫≠p nh·∫≠t ph√≠ ƒë√≥ng g√≥p!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå L·ªói:', error);
    process.exit(1);
  }); 