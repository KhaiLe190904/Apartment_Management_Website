const mongoose = require('mongoose');
const Fee = require('../../models/feeModel');

// Load environment variables
require('dotenv').config();

async function restoreOriginalFees() {
  try {
    // Connect to MongoDB
    await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/bluemoon_apartment', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    
    console.log('üîå ƒê√£ k·∫øt n·ªëi ƒë·∫øn MongoDB');

    // 1. Kh√¥i ph·ª•c "Ph√≠ qu·∫£n l√Ω h√†ng th√°ng" (PHI001)
    console.log('\nüîÑ ƒêang kh√¥i ph·ª•c "Ph√≠ qu·∫£n l√Ω h√†ng th√°ng"...');
    
    const restoredFee = await Fee.findOneAndUpdate(
      { feeCode: 'PHI001' },
      { active: true },
      { new: true }
    );
    
    if (restoredFee) {
      console.log(`‚úÖ ƒê√£ kh√¥i ph·ª•c: ${restoredFee.name} (${restoredFee.feeCode}) - ${restoredFee.amount.toLocaleString()} VND`);
    } else {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y ph√≠ PHI001');
    }

    // 2. Kh√¥i ph·ª•c ph√≠ g·ª≠i xe v·ªÅ gi√° tr·ªã ban ƒë·∫ßu
    console.log('\nüîÑ ƒêang kh√¥i ph·ª•c ph√≠ g·ª≠i xe v·ªÅ gi√° tr·ªã ban ƒë·∫ßu...');
    
    const vehicleFees = [
      { code: 'PHI002', name: 'Ph√≠ g·ª≠i xe √¥ t√¥', originalAmount: 1200000 },
      { code: 'PHI003', name: 'Ph√≠ g·ª≠i xe m√°y', originalAmount: 100000 },
      { code: 'PHI005', name: 'Ph√≠ g·ª≠i xe', originalAmount: 0.99 }
    ];
    
    for (const fee of vehicleFees) {
      const updatedFee = await Fee.findOneAndUpdate(
        { feeCode: fee.code },
        { amount: fee.originalAmount },
        { new: true }
      );
      
      if (updatedFee) {
        console.log(`‚úÖ ƒê√£ kh√¥i ph·ª•c ${updatedFee.name} (${updatedFee.feeCode}): ${updatedFee.amount.toLocaleString()} VND`);
      } else {
        console.log(`‚ùå Kh√¥ng t√¨m th·∫•y ph√≠ ${fee.code}`);
      }
    }

    // 3. Hi·ªÉn th·ªã danh s√°ch ph√≠ sau khi kh√¥i ph·ª•c
    console.log('\nüìã Danh s√°ch ph√≠ sau khi kh√¥i ph·ª•c:');
    const allFees = await Fee.find({}).sort({ feeCode: 1 });
    
    for (const fee of allFees) {
      const status = fee.active ? '‚úÖ Ho·∫°t ƒë·ªông' : '‚ùå Kh√¥ng ho·∫°t ƒë·ªông';
      const amount = `${fee.amount.toLocaleString()} VND`;
      console.log(`- ${fee.feeCode}: ${fee.name} - ${amount} (${status})`);
    }

  } catch (error) {
    console.error('‚ùå L·ªói khi kh√¥i ph·ª•c ph√≠:', error);
    throw error;
  } finally {
    // Close MongoDB connection
    await mongoose.connection.close();
    console.log('\nüîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
  }
}

// Run the script
restoreOriginalFees()
  .then(() => {
    console.log('\n‚úÖ Ho√†n th√†nh vi·ªác kh√¥i ph·ª•c ph√≠ v·ªÅ tr·∫°ng th√°i ban ƒë·∫ßu!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå L·ªói:', error);
    process.exit(1);
  }); 