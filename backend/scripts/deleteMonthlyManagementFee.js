const mongoose = require('mongoose');
const Payment = require('../models/paymentModel');
const Fee = require('../models/feeModel');

// Load environment variables
require('dotenv').config();

async function deleteMonthlyManagementFee() {
  try {
    // Connect to MongoDB
    await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/bluemoon_apartment', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    
    console.log('üîå ƒê√£ k·∫øt n·ªëi ƒë·∫øn MongoDB');

    // T√¨m ph√≠ qu·∫£n l√Ω h√†ng th√°ng
    const monthlyFee = await Fee.findOne({ feeCode: 'PHI001' });
    
    if (!monthlyFee) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y "Ph√≠ qu·∫£n l√Ω h√†ng th√°ng" (PHI001)');
      return;
    }

    console.log(`üìã T√¨m th·∫•y ph√≠: ${monthlyFee.name} (${monthlyFee.feeCode})`);
    console.log(`üí∞ Gi√°: ${monthlyFee.amount.toLocaleString()} VND`);

    // ƒê·∫øm s·ªë thanh to√°n li√™n quan
    const relatedPayments = await Payment.countDocuments({ fee: monthlyFee._id });
    console.log(`üìä S·ªë thanh to√°n li√™n quan: ${relatedPayments}`);

    if (relatedPayments > 0) {
      // Th·ªëng k√™ c√°c thanh to√°n tr∆∞·ªõc khi x√≥a
      const paidCount = await Payment.countDocuments({ fee: monthlyFee._id, status: 'paid' });
      const pendingCount = await Payment.countDocuments({ fee: monthlyFee._id, status: 'pending' });
      const overdueCount = await Payment.countDocuments({ fee: monthlyFee._id, status: 'overdue' });
      
      const totalRevenue = await Payment.aggregate([
        { $match: { fee: monthlyFee._id, status: 'paid' } },
        { $group: { _id: null, total: { $sum: '$amount' } } }
      ]);

      console.log(`\nüìä Th·ªëng k√™ thanh to√°n s·∫Ω b·ªã x√≥a:`);
      console.log(`   ‚úÖ ƒê√£ thanh to√°n: ${paidCount}`);
      console.log(`   ‚è≥ Ch·ªù thanh to√°n: ${pendingCount}`);
      console.log(`   ‚ùå Qu√° h·∫°n: ${overdueCount}`);
      console.log(`   üíµ T·ªïng doanh thu s·∫Ω m·∫•t: ${(totalRevenue[0]?.total || 0).toLocaleString()} VND`);

      // X√≥a t·∫•t c·∫£ thanh to√°n li√™n quan
      console.log(`\nüóëÔ∏è ƒêang x√≥a ${relatedPayments} thanh to√°n li√™n quan...`);
      const deletePaymentsResult = await Payment.deleteMany({ fee: monthlyFee._id });
      console.log(`‚úÖ ƒê√£ x√≥a ${deletePaymentsResult.deletedCount} thanh to√°n`);
    }

    // X√≥a ph√≠
    console.log(`\nüóëÔ∏è ƒêang x√≥a ph√≠ "${monthlyFee.name}"...`);
    const deleteFeeResult = await Fee.findByIdAndDelete(monthlyFee._id);
    
    if (deleteFeeResult) {
      console.log(`‚úÖ ƒê√£ x√≥a ph√≠: ${deleteFeeResult.name} (${deleteFeeResult.feeCode})`);
    } else {
      console.log(`‚ùå Kh√¥ng th·ªÉ x√≥a ph√≠`);
    }

    // Ki·ªÉm tra k·∫øt qu·∫£
    const remainingFee = await Fee.findOne({ feeCode: 'PHI001' });
    const remainingPayments = await Payment.countDocuments({ fee: monthlyFee._id });

    console.log(`\nüìä K·∫øt qu·∫£ ki·ªÉm tra:`);
    console.log(`   üìã Ph√≠ PHI001 c√≤n l·∫°i: ${remainingFee ? 'C√íN' : 'KH√îNG C√íN'}`);
    console.log(`   üí≥ Thanh to√°n li√™n quan c√≤n l·∫°i: ${remainingPayments}`);

    // Hi·ªÉn th·ªã danh s√°ch ph√≠ c√≤n l·∫°i
    console.log(`\nüìã Danh s√°ch ph√≠ c√≤n l·∫°i:`);
    const remainingFees = await Fee.find({}).sort({ feeCode: 1 });
    
    for (const fee of remainingFees) {
      const paymentCount = await Payment.countDocuments({ fee: fee._id });
      console.log(`   - ${fee.feeCode}: ${fee.name} (${paymentCount} thanh to√°n)`);
    }

    // Th·ªëng k√™ t·ªïng quan sau khi x√≥a
    const totalPayments = await Payment.countDocuments({});
    const totalFees = await Fee.countDocuments({});
    
    console.log(`\nüèÜ Th·ªëng k√™ sau khi x√≥a:`);
    console.log(`   üìã T·ªïng s·ªë ph√≠: ${totalFees}`);
    console.log(`   üí≥ T·ªïng s·ªë thanh to√°n: ${totalPayments}`);

  } catch (error) {
    console.error('‚ùå L·ªói khi x√≥a ph√≠ qu·∫£n l√Ω h√†ng th√°ng:', error);
    throw error;
  } finally {
    // Close MongoDB connection
    await mongoose.connection.close();
    console.log('\nüîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
  }
}

// Run the script
deleteMonthlyManagementFee()
  .then(() => {
    console.log('\n‚úÖ Ho√†n th√†nh vi·ªác x√≥a "Ph√≠ qu·∫£n l√Ω h√†ng th√°ng"!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå L·ªói:', error);
    process.exit(1);
  }); 