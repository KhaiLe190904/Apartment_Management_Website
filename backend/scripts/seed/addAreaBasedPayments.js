const mongoose = require('mongoose');
const Payment = require('../../models/paymentModel');
const Fee = require('../../models/feeModel');
const Household = require('../../models/householdModel');
const User = require('../../models/userModel');

// Load environment variables
require('dotenv').config();

async function addAreaBasedPayments() {
  try {
    // Connect to MongoDB
    await mongoose.connect(process.env.MONGO_URI || 'mongodb://localhost:27017/bluemoon_apartment', {
      useNewUrlParser: true,
      useUnifiedTopology: true,
    });
    
    console.log('üîå ƒê√£ k·∫øt n·ªëi ƒë·∫øn MongoDB');

    // L·∫•y th√¥ng tin c√°c ph√≠ theo di·ªán t√≠ch
    const serviceFee = await Fee.findOne({ feeCode: 'PHI006' }); // Ph√≠ d·ªãch v·ª• chung c∆∞
    const managementFee = await Fee.findOne({ feeCode: 'PHI007' }); // Ph√≠ qu·∫£n l√Ω chung c∆∞
    
    if (!serviceFee || !managementFee) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y ph√≠ PHI006 ho·∫∑c PHI007');
      return;
    }

    console.log('‚úÖ T√¨m th·∫•y ph√≠:');
    console.log(`- ${serviceFee.name}: ${serviceFee.amount} VND/m¬≤`);
    console.log(`- ${managementFee.name}: ${managementFee.amount} VND/m¬≤`);

    // L·∫•y danh s√°ch h·ªô gia ƒë√¨nh
    const households = await Household.find({}).limit(20); // Gi·ªõi h·∫°n 20 h·ªô ƒë·ªÉ test
    console.log(`üìã T√¨m th·∫•y ${households.length} h·ªô gia ƒë√¨nh`);

    // L·∫•y admin user l√†m collector
    const adminUser = await User.findOne({ role: 'admin' });
    
    // T·∫°o thanh to√°n cho 6 th√°ng g·∫ßn ƒë√¢y
    const months = [];
    for (let i = 0; i < 6; i++) {
      const date = new Date();
      date.setMonth(date.getMonth() - i);
      months.push({
        year: date.getFullYear(),
        month: date.getMonth() + 1,
        period: new Date(date.getFullYear(), date.getMonth(), 1)
      });
    }

    console.log('\nüí∞ ƒêang t·∫°o thanh to√°n...');
    
    let totalCreated = 0;
    const paymentMethods = ['cash', 'bank_transfer', 'card'];
    const statuses = ['paid', 'paid', 'paid', 'pending', 'overdue']; // T·ª∑ l·ªá thanh to√°n cao

    for (const household of households) {
      const area = household.area || Math.floor(Math.random() * 50) + 50; // Di·ªán t√≠ch t·ª´ 50-100m¬≤
      
      for (const monthData of months) {
        // T·∫°o thanh to√°n cho ph√≠ d·ªãch v·ª• chung c∆∞
        const serviceAmount = area * serviceFee.amount;
        const serviceStatus = statuses[Math.floor(Math.random() * statuses.length)];
        
        try {
          const servicePayment = new Payment({
            fee: serviceFee._id,
            household: household._id,
            amount: serviceAmount,
            status: serviceStatus,
            paymentDate: serviceStatus === 'paid' ? 
              new Date(monthData.year, monthData.month - 1, Math.floor(Math.random() * 28) + 1) : 
              undefined,
            dueDate: new Date(monthData.year, monthData.month - 1, 15), // H·∫°n thanh to√°n ng√†y 15
            method: paymentMethods[Math.floor(Math.random() * paymentMethods.length)],
            collector: adminUser ? adminUser._id : undefined,
            period: monthData.period,
            note: `Thanh to√°n ph√≠ d·ªãch v·ª• chung c∆∞ th√°ng ${monthData.month}/${monthData.year} - Di·ªán t√≠ch: ${area}m¬≤`
          });

          await servicePayment.save();
          totalCreated++;
        } catch (error) {
          if (error.code !== 11000) { // B·ªè qua l·ªói duplicate
            console.error(`L·ªói t·∫°o thanh to√°n d·ªãch v·ª• cho ${household.apartmentNumber}:`, error.message);
          }
        }

        // T·∫°o thanh to√°n cho ph√≠ qu·∫£n l√Ω chung c∆∞
        const managementAmount = area * managementFee.amount;
        const managementStatus = statuses[Math.floor(Math.random() * statuses.length)];
        
        try {
          const managementPayment = new Payment({
            fee: managementFee._id,
            household: household._id,
            amount: managementAmount,
            status: managementStatus,
            paymentDate: managementStatus === 'paid' ? 
              new Date(monthData.year, monthData.month - 1, Math.floor(Math.random() * 28) + 1) : 
              undefined,
            dueDate: new Date(monthData.year, monthData.month - 1, 15), // H·∫°n thanh to√°n ng√†y 15
            method: paymentMethods[Math.floor(Math.random() * paymentMethods.length)],
            collector: adminUser ? adminUser._id : undefined,
            period: monthData.period,
            note: `Thanh to√°n ph√≠ qu·∫£n l√Ω chung c∆∞ th√°ng ${monthData.month}/${monthData.year} - Di·ªán t√≠ch: ${area}m¬≤`
          });

          await managementPayment.save();
          totalCreated++;
        } catch (error) {
          if (error.code !== 11000) { // B·ªè qua l·ªói duplicate
            console.error(`L·ªói t·∫°o thanh to√°n qu·∫£n l√Ω cho ${household.apartmentNumber}:`, error.message);
          }
        }
      }
    }

    // Th·ªëng k√™ k·∫øt qu·∫£
    console.log(`\nüìä Th·ªëng k√™ thanh to√°n ƒë√£ t·∫°o:`);
    console.log(`‚úÖ T·ªïng s·ªë thanh to√°n ƒë√£ t·∫°o: ${totalCreated}`);
    
    const servicePayments = await Payment.find({ fee: serviceFee._id });
    const managementPayments = await Payment.find({ fee: managementFee._id });
    
    console.log(`- Ph√≠ d·ªãch v·ª• chung c∆∞: ${servicePayments.length} thanh to√°n`);
    console.log(`- Ph√≠ qu·∫£n l√Ω chung c∆∞: ${managementPayments.length} thanh to√°n`);

    // Th·ªëng k√™ theo tr·∫°ng th√°i
    const paidService = await Payment.countDocuments({ fee: serviceFee._id, status: 'paid' });
    const pendingService = await Payment.countDocuments({ fee: serviceFee._id, status: 'pending' });
    const overdueService = await Payment.countDocuments({ fee: serviceFee._id, status: 'overdue' });

    const paidManagement = await Payment.countDocuments({ fee: managementFee._id, status: 'paid' });
    const pendingManagement = await Payment.countDocuments({ fee: managementFee._id, status: 'pending' });
    const overdueManagement = await Payment.countDocuments({ fee: managementFee._id, status: 'overdue' });

    console.log(`\nüìã Th·ªëng k√™ theo tr·∫°ng th√°i:`);
    console.log(`Ph√≠ d·ªãch v·ª•: ${paidService} ƒë√£ thanh to√°n, ${pendingService} ch·ªù thanh to√°n, ${overdueService} qu√° h·∫°n`);
    console.log(`Ph√≠ qu·∫£n l√Ω: ${paidManagement} ƒë√£ thanh to√°n, ${pendingManagement} ch·ªù thanh to√°n, ${overdueManagement} qu√° h·∫°n`);

  } catch (error) {
    console.error('‚ùå L·ªói khi t·∫°o thanh to√°n:', error);
    throw error;
  } finally {
    // Close MongoDB connection
    await mongoose.connection.close();
    console.log('\nüîå ƒê√£ ƒë√≥ng k·∫øt n·ªëi MongoDB');
  }
}

// Run the script
addAreaBasedPayments()
  .then(() => {
    console.log('\n‚úÖ Ho√†n th√†nh vi·ªác t·∫°o thanh to√°n cho ph√≠ theo di·ªán t√≠ch!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå L·ªói:', error);
    process.exit(1);
  }); 