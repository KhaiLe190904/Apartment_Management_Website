const mongoose = require('mongoose');
const Resident = require('../../models/residentModel');

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/bluemoon_apartment');

const addTempStatusToResidents = async () => {
  try {
    console.log('üè† B·∫Øt ƒë·∫ßu th√™m tr·∫°ng th√°i t·∫°m tr√∫/t·∫°m v·∫Øng cho c∆∞ d√¢n...');

    // L·∫•y m·ªôt s·ªë c∆∞ d√¢n ƒë·ªÉ c·∫≠p nh·∫≠t
    const residents = await Resident.find().limit(5);

    if (residents.length === 0) {
      console.log('‚ùå Kh√¥ng t√¨m th·∫•y c∆∞ d√¢n n√†o.');
      return;
    }

    // C·∫≠p nh·∫≠t 2 c∆∞ d√¢n ƒë·∫ßu ti√™n l√†m t·∫°m tr√∫
    if (residents[0]) {
      await Resident.findByIdAndUpdate(residents[0]._id, {
        tempStatus: 'tam_tru',
        tempStartDate: new Date('2024-12-01'),
        tempEndDate: new Date('2025-06-01'),
        tempReason: 'ƒêi l√†m t·∫°i th√†nh ph·ªë H·ªì Ch√≠ Minh'
      });
      console.log(`‚úÖ ${residents[0].fullName} - ƒê√£ set T·∫†M TR√ö`);
    }

    if (residents[1]) {
      await Resident.findByIdAndUpdate(residents[1]._id, {
        tempStatus: 'tam_tru',
        tempStartDate: new Date('2024-11-15'),
        tempEndDate: new Date('2025-05-15'),
        tempReason: 'H·ªçc t·∫≠p t·∫°i H√† N·ªôi'
      });
      console.log(`‚úÖ ${residents[1].fullName} - ƒê√£ set T·∫†M TR√ö`);
    }

    // C·∫≠p nh·∫≠t 2 c∆∞ d√¢n ti·∫øp theo l√†m t·∫°m v·∫Øng
    if (residents[2]) {
      await Resident.findByIdAndUpdate(residents[2]._id, {
        tempStatus: 'tam_vang',
        tempStartDate: new Date('2024-12-15'),
        tempEndDate: new Date('2025-02-15'),
        tempReason: 'Du h·ªçc t·∫°i Nh·∫≠t B·∫£n'
      });
      console.log(`‚úÖ ${residents[2].fullName} - ƒê√£ set T·∫†M V·∫ÆNG`);
    }

    if (residents[3]) {
      await Resident.findByIdAndUpdate(residents[3]._id, {
        tempStatus: 'tam_vang',
        tempStartDate: new Date('2024-10-01'),
        tempEndDate: new Date('2025-01-01'),
        tempReason: 'C√¥ng t√°c d√†i h·∫°n t·∫°i Singapore'
      });
      console.log(`‚úÖ ${residents[3].fullName} - ƒê√£ set T·∫†M V·∫ÆNG`);
    }

    // C∆∞ d√¢n cu·ªëi gi·ªØ nguy√™n (none)
    console.log(`‚ÑπÔ∏è  ${residents[4]?.fullName || 'C∆∞ d√¢n kh√°c'} - Gi·ªØ nguy√™n (kh√¥ng c√≥ tr·∫°ng th√°i t·∫°m tr√∫/t·∫°m v·∫Øng)`);

    // Th·ªëng k√™
    const stats = await Promise.all([
      Resident.countDocuments({ tempStatus: 'tam_tru' }),
      Resident.countDocuments({ tempStatus: 'tam_vang' }),
      Resident.countDocuments({ tempStatus: 'none' }),
      Resident.countDocuments()
    ]);

    console.log('\nüìä TH·ªêNG K√ä TR·∫†NG TH√ÅI T·∫†M TR√ö/T·∫†M V·∫ÆNG:');
    console.log(`T·∫°m tr√∫: ${stats[0]}`);
    console.log(`T·∫°m v·∫Øng: ${stats[1]}`);
    console.log(`B√¨nh th∆∞·ªùng: ${stats[2]}`);
    console.log(`T·ªïng c∆∞ d√¢n: ${stats[3]}`);

    console.log('\nüéâ Ho√†n th√†nh c·∫≠p nh·∫≠t tr·∫°ng th√°i t·∫°m tr√∫/t·∫°m v·∫Øng!');
    console.log('\nüí° B√¢y gi·ªù b·∫°n c√≥ th·ªÉ:');
    console.log('1. Xem chi ti·∫øt h·ªô gia ƒë√¨nh ƒë·ªÉ th·∫•y badge t·∫°m tr√∫/t·∫°m v·∫Øng');
    console.log('2. S·ª≠a th√¥ng tin c∆∞ d√¢n ƒë·ªÉ thay ƒë·ªïi tr·∫°ng th√°i');
    console.log('3. Th·∫•y ng√†y h·∫øt h·∫°n d∆∞·ªõi badge');

  } catch (error) {
    console.error('‚ùå L·ªói khi c·∫≠p nh·∫≠t:', error);
  } finally {
    mongoose.connection.close();
  }
};

addTempStatusToResidents(); 